{"ast":null,"code":"/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5050\";\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\n\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({\n        message: payload.error\n      });\n    }\n\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n  }\n}\n/**\n * Retrieves all existing dishes.\n * @returns {Promise<[dish]>}\n *  a promise that resolves to a possibly empty array of dishes saved in the database.\n */\n\n\nexport async function listDishes(signal) {\n  const url = `${API_BASE_URL}/dishes`;\n  return await fetchJson(url, {\n    signal\n  });\n}\n/**\n * Creates a new order\n * @returns {Promise<[order]>}\n *  a promise that resolves to the newly created order.\n */\n\nexport async function createOrder(order, signal) {\n  const url = `${API_BASE_URL}/orders`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      data: order\n    }),\n    signal\n  };\n  return await fetchJson(url, options);\n}\n/**\n * Retrieves the order with the specified `orderId`\n * @param orderId\n *  the `id` property matching the desired order.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<order>}\n *  a promise that resolves to the saved order.\n */\n\nexport async function readOrder(orderId, signal) {\n  const url = `${API_BASE_URL}/orders/${orderId}`;\n  return await fetchJson(url, {\n    signal\n  });\n}\n/**\n * Retrieves all existing orders.\n * @returns {Promise<[order]>}\n *  a promise that resolves to a possibly empty array of orders saved in the database.\n */\n\nexport async function listOrders(signal) {\n  const url = `${API_BASE_URL}/orders`;\n  return await fetchJson(url, {\n    signal\n  });\n}\n/**\n * Updates a existing order\n * @returns {Promise<[order]>}\n *  a promise that resolves to the update order.\n */\n\nexport async function updateOrder(order, signal) {\n  const url = `${API_BASE_URL}/orders/${order.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({\n      data: order\n    }),\n    signal\n  };\n  return await fetchJson(url, options);\n}\n/**\n * Deletes the order with the specified `orderId`.\n * @param orderId\n *  the id of the order to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<null|String>}\n *  a promise that resolves to null or an error message.\n */\n\nexport async function deleteOrder(orderId, signal) {\n  const url = `${API_BASE_URL}/orders/${orderId}`;\n  const options = {\n    method: \"DELETE\",\n    signal\n  };\n  return await fetchJson(url, options);\n}\n/**\n * Creates a new dish\n * @returns {Promise<[dish]>}\n *  a promise that resolves to the newly created dish.\n */\n\nexport async function createDish(dish, signal) {\n  const url = `${API_BASE_URL}/dishes`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      data: dish\n    }),\n    signal\n  };\n  return await fetchJson(url, options);\n}\n/**\n * Retrieves the order with the specified `dishId`\n * @param dishId\n *  the `id` property matching the desired dish.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<dish>}\n *  a promise that resolves to the saved dish.\n */\n\nexport async function readDish(dishId, signal) {\n  const url = `${API_BASE_URL}/dishes/${dishId}`;\n  return await fetchJson(url, {\n    signal\n  });\n}\n/**\n * Updates a existing dish\n * @returns {Promise<[dish]>}\n *  a promise that resolves to the updated dish.\n */\n\nexport async function updateDish(dish, signal) {\n  const url = `${API_BASE_URL}/dishes/${dish.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({\n      data: dish\n    }),\n    signal\n  };\n  return await fetchJson(url, options);\n}\n/**\n * Deletes the order with the specified `dishId`.\n * @param dishId\n *  the id of the order to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<null|String>}\n *  a promise that resolves to null or an error message.\n */\n\nexport async function deleteDish(dishId, signal) {\n  const url = `${API_BASE_URL}/dishes/${dishId}`;\n  const options = {\n    method: \"DELETE\",\n    signal\n  };\n  return await fetchJson(url, options);\n}","map":{"version":3,"sources":["/Users/ramson/Developer/GitHub/production/grabDash-front-end/main-front/src/utils/api.js"],"names":["API_BASE_URL","process","env","headers","Headers","append","fetchJson","url","options","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack","listDishes","signal","createOrder","order","method","body","JSON","stringify","readOrder","orderId","listOrders","updateOrder","id","deleteOrder","createDish","dish","readDish","dishId","updateDish","deleteDish"],"mappings":"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","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5050\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({ message: payload.error });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing dishes.\n * @returns {Promise<[dish]>}\n *  a promise that resolves to a possibly empty array of dishes saved in the database.\n */\nexport async function listDishes(signal) {\n  const url = `${API_BASE_URL}/dishes`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new order\n * @returns {Promise<[order]>}\n *  a promise that resolves to the newly created order.\n */\nexport async function createOrder(order, signal) {\n  const url = `${API_BASE_URL}/orders`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({ data: order }),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the order with the specified `orderId`\n * @param orderId\n *  the `id` property matching the desired order.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<order>}\n *  a promise that resolves to the saved order.\n */\nexport async function readOrder(orderId, signal) {\n  const url = `${API_BASE_URL}/orders/${orderId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Retrieves all existing orders.\n * @returns {Promise<[order]>}\n *  a promise that resolves to a possibly empty array of orders saved in the database.\n */\nexport async function listOrders(signal) {\n  const url = `${API_BASE_URL}/orders`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates a existing order\n * @returns {Promise<[order]>}\n *  a promise that resolves to the update order.\n */\nexport async function updateOrder(order, signal) {\n  const url = `${API_BASE_URL}/orders/${order.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({ data: order }),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the order with the specified `orderId`.\n * @param orderId\n *  the id of the order to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<null|String>}\n *  a promise that resolves to null or an error message.\n */\nexport async function deleteOrder(orderId, signal) {\n  const url = `${API_BASE_URL}/orders/${orderId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new dish\n * @returns {Promise<[dish]>}\n *  a promise that resolves to the newly created dish.\n */\nexport async function createDish(dish, signal) {\n  const url = `${API_BASE_URL}/dishes`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({ data: dish }),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the order with the specified `dishId`\n * @param dishId\n *  the `id` property matching the desired dish.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<dish>}\n *  a promise that resolves to the saved dish.\n */\nexport async function readDish(dishId, signal) {\n  const url = `${API_BASE_URL}/dishes/${dishId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates a existing dish\n * @returns {Promise<[dish]>}\n *  a promise that resolves to the updated dish.\n */\nexport async function updateDish(dish, signal) {\n  const url = `${API_BASE_URL}/dishes/${dish.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({ data: dish }),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the order with the specified `dishId`.\n * @param dishId\n *  the id of the order to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<null|String>}\n *  a promise that resolves to null or an error message.\n */\nexport async function deleteDish(dishId, signal) {\n  const url = `${API_BASE_URL}/dishes/${dishId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n"]},"metadata":{},"sourceType":"module"}